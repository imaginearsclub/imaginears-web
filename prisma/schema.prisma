generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified Boolean? @default(false)
  image         String?
  minecraftName String? // Minecraft username for display
  timezone      String?  @default("America/New_York") // User's preferred timezone (IANA timezone)
  role          String   @default("USER") // Can be system role (UserRole) or custom role slug
  permissions   Json? // Custom permissions override { "events:write": true, "applications:read": true }

  // Two-Factor Authentication
  twoFactorEnabled Boolean? @default(false)
  twoFactorSecret  String?  @db.Text // Encrypted TOTP secret
  backupCodes      Json? // Array of hashed backup codes

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  accounts    Account[]
  sessions    Session[]
  teammembers TeamMember[]
  members     Member[]
  invitations Invitation[]

  // Relations for tracking changes
  createdEvents       Event[]       @relation("EventCreatedBy")
  updatedEvents       Event[]       @relation("EventUpdatedBy")
  createdApplications Application[] @relation("ApplicationCreatedBy")
  updatedApplications Application[] @relation("ApplicationUpdatedBy")
  apiKeys             ApiKey[] // API keys created by this user

  // Notification relations
  notifications           Notification[]           @relation("UserNotifications")
  notificationPreferences NotificationPreferences? @relation("UserNotificationPreferences")

  @@index([role])
  @@map("user")
}

model Account {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Better-Auth core fields
  providerId            String    @db.VarChar(255)
  accountId             String    @db.VarChar(255)
  password              String?   @db.Text
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@index([userId], map: "Account_userId_fkey")
  @@map("account")
}

model Session {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?  @db.Text
  userAgent            String?  @db.Text
  activeOrganizationId String?  @db.Text
  activeTeamId         String?  @db.Text

  // Enhanced session tracking
  deviceName String? @db.VarChar(255) // User-friendly device name (e.g., "John's iPhone")
  deviceType String? @db.VarChar(50) // mobile, desktop, tablet
  browser    String? @db.VarChar(100) // Chrome, Firefox, Safari, etc.
  os         String? @db.VarChar(100) // Windows, macOS, iOS, Android, etc.
  country    String? @db.VarChar(100) // Country name from IP
  city       String? @db.VarChar(255) // City name from IP

  // Security & Trust
  trustLevel     Int      @default(0) // 0=new, 1=recognized, 2=trusted
  isSuspicious   Boolean  @default(false) // Flagged for unusual activity
  lastActivityAt DateTime @default(now()) // Last API call or page view

  // Remember me
  isRememberMe Boolean @default(false) // Extended session duration

  // Session metadata
  loginMethod    String? @db.VarChar(50) // password, oauth, 2fa
  requiredStepUp Boolean @default(false) // Requires 2FA for sensitive actions

  activities SessionActivity[]

  @@index([userId], map: "Session_userId_fkey")
  @@index([lastActivityAt])
  @@index([isSuspicious])
  @@map("session")
}

// Track detailed session activity
model SessionActivity {
  id        String  @id @default(cuid())
  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Activity details
  action   String  @db.VarChar(100) // login, logout, page_view, api_call, password_change, etc.
  endpoint String? @db.VarChar(500) // URL or API endpoint
  method   String? @db.VarChar(10) // GET, POST, etc.

  // Context
  ipAddress  String? @db.Text
  userAgent  String? @db.Text
  statusCode Int? // HTTP status code
  duration   Int? // Request duration in ms

  // Flags
  isError      Boolean @default(false)
  isSuspicious Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([sessionId])
  @@index([action])
  @@index([createdAt])
  @@index([isSuspicious])
}

// Notification System
model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // Notification content
  title   String @db.VarChar(255)
  message String @db.Text
  type    String @db.VarChar(50) // info, success, warning, error, security, event, player, system

  // Priority & Category
  priority String @default("normal") @db.VarChar(20) // low, normal, high, urgent
  category String @db.VarChar(50) // security, events, players, sessions, system, announcement

  // Action link
  actionUrl  String? @db.VarChar(500) // Link to relevant page
  actionText String? @db.VarChar(100) // Button text (e.g., "View Event", "Review Login")

  // Metadata
  metadata Json? // Additional data (event ID, player name, etc.)

  // Status
  isRead     Boolean   @default(false)
  readAt     DateTime?
  isArchived Boolean   @default(false)
  archivedAt DateTime?

  // Delivery tracking
  deliveredVia Json? // ["in_app", "email", "push"] - which channels were used
  emailSentAt  DateTime?

  // Expiration
  expiresAt DateTime? // Auto-archive after this date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([isRead])
  @@index([priority])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("notification")
}

// User notification preferences
model NotificationPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation("UserNotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)

  // Channel preferences
  inAppEnabled Boolean @default(true) // In-app notifications
  emailEnabled Boolean @default(true) // Email notifications
  pushEnabled  Boolean @default(false) // Browser push notifications (future)

  // Category preferences (can be disabled per category)
  securityAlerts      Boolean @default(true) // Login alerts, suspicious activity
  eventReminders      Boolean @default(true) // Event starting soon
  playerAlerts        Boolean @default(true) // Player join/leave (for admins)
  sessionAlerts       Boolean @default(true) // Session warnings (idle, expiring)
  systemAnnouncements Boolean @default(true) // System updates, maintenance

  // Delivery timing
  digestEnabled     Boolean @default(false) // Bundle notifications into digest
  digestFrequency   String  @default("daily") @db.VarChar(20) // instant, hourly, daily, weekly
  quietHoursEnabled Boolean @default(false) // Mute during certain hours
  quietHoursStart   String? @db.VarChar(5) // "22:00"
  quietHoursEnd     String? @db.VarChar(5) // "08:00"

  // Sound & Visual
  soundEnabled         Boolean @default(true) // Play sound for notifications
  desktopNotifications Boolean @default(false) // Browser desktop notifications

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("notification_preferences")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id               String        @id @default(cuid())
  title            String
  world            String
  startAt          DateTime
  endAt            DateTime
  status           EventStatus   @default(Draft)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  category         EventCategory @default(Other)
  details          String?       @db.Text
  shortDescription String?       @db.VarChar(300)

  // Recurrence + scheduling (JSON instead of arrays)
  timezone       String         @default("America/New_York")
  recurrenceFreq RecurrenceFreq @default(NONE)

  /// JSON arrays:
  /// - byWeekdayJson: ["MO","WE","FR"] (values are Weekday codes)
  /// - timesJson: ["15:00","18:00","21:00"] (24h HH:mm)
  byWeekdayJson Json?
  timesJson     Json?

  recurrenceUntil DateTime? // last day to schedule (optional)

  // Track who created and last updated this event
  createdById String?
  createdBy   User?   @relation("EventCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("EventUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([startAt])
  @@index([category])
  @@index([recurrenceFreq])
  @@index([status, startAt])
  @@index([category, status])
  @@index([createdById])
  @@index([updatedById])
}

model AppSettings {
  id String @id @default("global") @db.VarChar(32)

  // General
  siteName String @default("Imaginears")
  timezone String @default("America/New_York")

  // Markdown content
  homepageIntro             String? @db.Text // shown on homepage
  footerMarkdown            String? @db.Text // site-wide footer content
  aboutMarkdown             String? @db.Text // /about page content
  applicationsIntroMarkdown String? @db.Text // intro above public application form

  // JSON config
  branding     Json? // { logoUrl, bannerUrl, accentHex }
  events       Json? // { defaultCategory, recurrenceFreq, byWeekday[], times[] }
  applications Json? // { turnstileSiteKey, allowApplications }
  social       Json? // { twitter, instagram, discord, youtube, facebook, tiktok }
  seo          Json? // { title, description, image, twitterCard }

  // Feature toggles
  features Json? // { showEventsOnHome: true, showApplicationsOnHome: true }

  // Notifications
  notifications Json? // { discordWebhookUrl, discordApplicationsWebhookUrl, discordEventsWebhookUrl, notifyOnNewApplication, notifyOnNewEvent, emailNotifications, adminEmail }

  // Maintenance mode
  maintenance Json? // { enabled, message, allowedIPs[] }

  // Security settings
  security Json? // { rateLimitEnabled, maxRequestsPerMinute, requireEmailVerification }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Core fields
  name       String
  email      String
  mcUsername String
  role       AppRole
  status     AppStatus @default(New)
  timezone   String
  ageRange   String // "Under18" | "18-24" | "25+"

  canDiscord  Boolean
  discordUser String? // only when canDiscord = true

  priorStaff   Boolean
  priorServers String? // optionally comma-separated or text

  visitedDisney  Boolean
  visitedDetails String?

  // Role-specific answers (keep simple first pass)
  // Developer
  devPortfolioUrl String?
  devSpecialty    String? // FullStack | Plugin | Web
  devLanguages    String? // comma-joined

  // Imaginear
  imgPortfolioUrl   String?
  imgWorldEditLevel String? // Beginner | Intermediate | Advanced
  imgPluginFamiliar String? // Beginner | Intermediate | Advanced

  // Guest Relations
  grStory       String?
  grValue       String?
  grSuggestions String?

  // Free-form metadata
  notes String? @db.Text

  // Track who created and last updated this application
  createdById String?
  createdBy   User?   @relation("ApplicationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("ApplicationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Performance indexes
  @@index([status, createdAt])
  @@index([email])
  @@index([role, status])
  @@index([createdById])
  @@index([updatedById])
}

enum AppRole {
  Developer
  Imaginear
  GuestServices
}

enum AppStatus {
  New
  InReview
  Approved
  Rejected
}

// Custom roles that can be created by admins
model CustomRole {
  id          String   @id @default(cuid())
  slug        String   @unique // URL-friendly identifier (e.g., "event-manager")
  name        String // Display name (e.g., "Event Manager")
  description String?  @db.Text
  permissions Json // Array of permission strings ["events:write", "events:read"]
  isSystem    Boolean  @default(false) // System roles (OWNER, ADMIN, etc.) cannot be deleted
  color       String? // Hex color for UI badges
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([isSystem])
}

// API Keys for external/programmatic access
model ApiKey {
  id        String @id @default(cuid())
  name      String // Friendly name for the key (e.g., "Mobile App", "Analytics Service")
  key       String @unique // The actual API key (hashed)
  keyPrefix String // First 8 chars of key for identification (e.g., "sk_live_12345678...")

  // Permissions & Scopes
  scopes   Json // Array of allowed scopes: ["events:read", "applications:read", etc.]
  isActive Boolean @default(true)

  // Rate Limiting
  rateLimit Int @default(100) // Requests per minute

  // Ownership & Tracking
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Usage tracking
  lastUsedAt DateTime?
  usageCount Int       @default(0)

  // Metadata
  description String?   @db.Text
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([key])
  @@index([keyPrefix])
  @@index([createdById])
  @@index([isActive])
}

// Rate limiting tracking
model RateLimit {
  id          String   @id @default(cuid())
  identifier  String // API key or IP address
  endpoint    String // Which endpoint was called
  count       Int      @default(1)
  windowStart DateTime @default(now())

  @@unique([identifier, endpoint, windowStart])
  @@index([identifier, windowStart])
  @@index([windowStart]) // For cleanup
}

enum UserRole {
  OWNER // Full system access, can manage everything
  ADMIN // Can manage most features, users, and settings
  MODERATOR // Can manage events, applications, and players
  STAFF // Can view and assist, limited editing
  USER // Basic authenticated access
}

enum EventStatus {
  Draft
  Scheduled
  Published
  Archived
}

enum EventCategory {
  Fireworks
  SeasonalOverlay
  MeetAndGreet
  Parade
  Other
}

enum ApplicationRole {
  Developer
  GuestServices
  Imaginear
}

enum ApplicationStatus {
  New
  InReview
  Approved
  Rejected
}

// Enums

enum RecurrenceFreq {
  NONE
  DAILY
  WEEKLY
}

enum Weekday {
  SU
  MO
  TU
  WE
  TH
  FR
  SA
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Team {
  id             String       @id
  name           String       @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime
  updatedAt      DateTime?    @updatedAt
  teammembers    TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String    @id
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime?

  @@map("teamMember")
}

model Organization {
  id          String       @id
  name        String       @db.Text
  slug        String
  logo        String?      @db.Text
  createdAt   DateTime
  metadata    String?      @db.Text
  teams       Team[]
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String       @db.Text
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String       @db.Text
  role           String?      @db.Text
  teamId         String?      @db.Text
  status         String       @db.Text
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

// ============================================================================
// ANALYTICS SYSTEM
// ============================================================================

// Track individual analytics events (page views, clicks, actions)
model AnalyticsEvent {
  id String @id @default(cuid())

  // Event identification
  eventType String @db.VarChar(100) // page_view, button_click, form_submit, event_view, etc.
  eventName String @db.VarChar(255) // Friendly name (e.g., "Homepage Visit", "Apply Button Clicked")

  // User context
  userId    String? // null for anonymous users
  sessionId String? // Session tracking
  anonymousId String? @db.VarChar(100) // For anonymous tracking (browser fingerprint)

  // Page context
  path       String  @db.VarChar(500) // URL path
  referrer   String? @db.VarChar(500) // Where they came from
  urlParams  Json? // Query parameters
  
  // Device & Location
  deviceType String? @db.VarChar(50) // mobile, desktop, tablet
  browser    String? @db.VarChar(100)
  os         String? @db.VarChar(100)
  country    String? @db.VarChar(100)
  city       String? @db.VarChar(255)

  // Event metadata
  properties Json? // Custom properties (e.g., { eventId: "123", category: "Fireworks" })
  duration   Int? // Time spent (for page views) in milliseconds

  // Timestamps
  timestamp DateTime @default(now())
  date      DateTime @default(now()) @db.Date // For aggregation queries

  @@index([eventType])
  @@index([userId])
  @@index([sessionId])
  @@index([date])
  @@index([eventType, date])
  @@index([userId, date])
  @@index([timestamp])
  @@map("analytics_event")
}

// Aggregated analytics metrics (for fast dashboard queries)
model AnalyticsMetric {
  id String @id @default(cuid())

  // Time window
  date  DateTime @db.Date // Which day this metric is for
  hour  Int? // Hour of day (0-23) for hourly metrics, null for daily
  period String @db.VarChar(20) // "hourly" or "daily"

  // Metric identification
  metricType String @db.VarChar(100) // page_views, unique_visitors, events_viewed, applications_submitted, etc.
  category   String? @db.VarChar(100) // Optional category (e.g., "Fireworks", "Developer")

  // Aggregated values
  value    Int // Count, sum, etc.
  metadata Json? // Additional aggregated data

  // Dimensions (for filtering)
  dimension String? @db.VarChar(100) // e.g., "deviceType:mobile", "country:US"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, hour, period, metricType, category, dimension])
  @@index([date])
  @@index([metricType])
  @@index([date, metricType])
  @@map("analytics_metric")
}

// Player analytics (Web + Minecraft integration)
model PlayerAnalytics {
  id String @id @default(cuid())

  // Player identification
  userId        String? // If they have an account
  minecraftUuid String? @db.VarChar(36) // Minecraft UUID (from MC Player Analytics)
  minecraftName String? @db.VarChar(16) // Minecraft username

  // Web activity
  lastWebVisit    DateTime?
  totalWebVisits  Int       @default(0)
  totalPageViews  Int       @default(0)
  eventsViewed    Int       @default(0)
  applicationsSubmitted Int @default(0)

  // Minecraft activity (populated from Player Analytics Plugin)
  lastMinecraftJoin  DateTime?
  totalMinecraftTime Int @default(0) // Total playtime in minutes
  totalMinecraftJoins Int @default(0)
  firstMinecraftJoin DateTime?

  // Engagement scores
  webEngagementScore  Float @default(0) // 0-100
  mcEngagementScore   Float @default(0) // 0-100
  overallEngagement   Float @default(0) // Combined score

  // Retention
  isActive      Boolean  @default(true) // Active in last 30 days
  lastActiveAt  DateTime @default(now())
  cohortMonth   String? @db.VarChar(7) // YYYY-MM when they first joined

  // Metadata
  metadata  Json? // Additional player data from Minecraft plugin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@unique([minecraftUuid])
  @@index([minecraftName])
  @@index([isActive])
  @@index([lastActiveAt])
  @@index([cohortMonth])
  @@map("player_analytics")
}

// Event analytics (track event performance)
model EventAnalytics {
  id String @id @default(cuid())

  // Event reference
  eventId    String
  eventTitle String @db.VarChar(255)
  category   String @db.VarChar(100)
  startAt    DateTime

  // View metrics
  totalViews    Int @default(0)
  uniqueVisitors Int @default(0)

  // Engagement
  totalClicks   Int @default(0) // Clicks on event details/actions
  shareCount    Int @default(0)
  favoriteCount Int @default(0)

  // Attendance tracking (if integration is added later)
  expectedAttendance Int? // Estimated from RSVP or registration
  actualAttendance   Int? // Actual players who attended (from Minecraft)

  // Time-based metrics
  viewsByHour Json? // { "0": 5, "1": 3, ... } views per hour of day
  peakViewTime DateTime? // When most people viewed it

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId])
  @@index([category])
  @@index([startAt])
  @@map("event_analytics")
}

// Application analytics
model ApplicationAnalytics {
  id String @id @default(cuid())

  // Time window
  date DateTime @db.Date

  // Metrics by role
  role   String @db.VarChar(50) // Developer, Imagineer, GuestServices, or "all"
  status String @db.VarChar(50) // New, InReview, Approved, Rejected, or "all"

  // Counts
  totalApplications    Int @default(0)
  approvedApplications Int @default(0)
  rejectedApplications Int @default(0)
  avgProcessingTime    Int? // Average time to process in hours

  // Funnel metrics
  formStarted   Int @default(0) // How many started the form
  formCompleted Int @default(0) // How many completed it
  conversionRate Float @default(0) // Completion rate

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, role, status])
  @@index([date])
  @@index([role])
  @@map("application_analytics")
}

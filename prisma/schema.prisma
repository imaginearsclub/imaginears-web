
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified Boolean?     @default(false)
  image         String?
  minecraftName String?      // Minecraft username for display
  role          String       @default("USER") // Can be system role (UserRole) or custom role slug
  permissions   Json?        // Custom permissions override { "events:write": true, "applications:read": true }
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  teammembers   TeamMember[]
  members       Member[]
  invitations   Invitation[]
  
  // Relations for tracking changes
  createdEvents Event[] @relation("EventCreatedBy")
  updatedEvents Event[] @relation("EventUpdatedBy")
  createdApplications Application[] @relation("ApplicationCreatedBy")
  updatedApplications Application[] @relation("ApplicationUpdatedBy")

  @@index([role])
  @@map("user")
}

model Account {
  id                     String   @id @default(cuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Better-Auth core fields
  providerId             String   @db.VarChar(255)
  accountId              String   @db.VarChar(255)
  password               String?  @db.Text
  accessToken            String?  @db.Text
  refreshToken           String?  @db.Text
  idToken                String?  @db.Text
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([providerId, accountId])
  @@index([userId], map: "Account_userId_fkey")
  @@map("account")
}

model Session {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt             DateTime
  token                 String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  ipAddress             String?  @db.Text
  userAgent             String?  @db.Text
  activeOrganizationId  String?  @db.Text
  activeTeamId          String?  @db.Text

  @@index([userId], map: "Session_userId_fkey")
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id               String        @id @default(cuid())
  title            String
  world            String
  startAt          DateTime
  endAt            DateTime
  status           EventStatus   @default(Draft)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  category         EventCategory @default(Other)
  details          String?       @db.Text
  shortDescription String?       @db.VarChar(300)

  // Recurrence + scheduling (JSON instead of arrays)
  timezone       String         @default("America/New_York")
  recurrenceFreq RecurrenceFreq @default(NONE)

  /// JSON arrays:
  /// - byWeekdayJson: ["MO","WE","FR"] (values are Weekday codes)
  /// - timesJson: ["15:00","18:00","21:00"] (24h HH:mm)
  byWeekdayJson Json?
  timesJson     Json?

  recurrenceUntil DateTime? // last day to schedule (optional)
  
  // Track who created and last updated this event
  createdById String?
  createdBy   User?   @relation("EventCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("EventUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([startAt])
  @@index([category])
  @@index([recurrenceFreq])
  @@index([status, startAt])
  @@index([category, status])
  @@index([createdById])
  @@index([updatedById])
}

model AppSettings {
  id String @id @default("global") @db.VarChar(32)

  // General
  siteName String @default("Imaginears")
  timezone String @default("America/New_York")

  // Markdown content
  homepageIntro             String? @db.Text // shown on homepage
  footerMarkdown            String? @db.Text // site-wide footer content
  aboutMarkdown             String? @db.Text // /about page content
  applicationsIntroMarkdown String? @db.Text // intro above public application form

  // JSON config
  branding     Json? // { logoUrl, bannerUrl, accentHex }
  events       Json? // { defaultCategory, recurrenceFreq, byWeekday[], times[] }
  applications Json? // { turnstileSiteKey, allowApplications }
  social       Json? // { twitter, instagram, discord, youtube, facebook, tiktok }
  seo          Json? // { title, description, image, twitterCard }

  // Feature toggles
  features Json? // { showEventsOnHome: true, showApplicationsOnHome: true }

  // Notifications
  notifications Json? // { discordWebhookUrl, discordApplicationsWebhookUrl, discordEventsWebhookUrl, notifyOnNewApplication, notifyOnNewEvent, emailNotifications, adminEmail }

  // Maintenance mode
  maintenance Json? // { enabled, message, allowedIPs[] }

  // Security settings
  security Json? // { rateLimitEnabled, maxRequestsPerMinute, requireEmailVerification }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Core fields
  name       String
  email      String
  mcUsername String
  role       AppRole
  status     AppStatus @default(New)
  timezone   String
  ageRange   String // "Under18" | "18-24" | "25+"

  canDiscord  Boolean
  discordUser String? // only when canDiscord = true

  priorStaff   Boolean
  priorServers String? // optionally comma-separated or text

  visitedDisney  Boolean
  visitedDetails String?

  // Role-specific answers (keep simple first pass)
  // Developer
  devPortfolioUrl String?
  devSpecialty    String? // FullStack | Plugin | Web
  devLanguages    String? // comma-joined

  // Imaginear
  imgPortfolioUrl   String?
  imgWorldEditLevel String? // Beginner | Intermediate | Advanced
  imgPluginFamiliar String? // Beginner | Intermediate | Advanced

  // Guest Relations
  grStory       String?
  grValue       String?
  grSuggestions String?

  // Free-form metadata
  notes String? @db.Text
  
  // Track who created and last updated this application
  createdById String?
  createdBy   User?   @relation("ApplicationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("ApplicationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Performance indexes
  @@index([status, createdAt])
  @@index([email])
  @@index([role, status])
  @@index([createdById])
  @@index([updatedById])
}

enum AppRole {
  Developer
  Imaginear
  GuestServices
}

enum AppStatus {
  New
  InReview
  Approved
  Rejected
}

// Custom roles that can be created by admins
model CustomRole {
  id          String   @id @default(cuid())
  slug        String   @unique // URL-friendly identifier (e.g., "event-manager")
  name        String   // Display name (e.g., "Event Manager")
  description String?  @db.Text
  permissions Json     // Array of permission strings ["events:write", "events:read"]
  isSystem    Boolean  @default(false) // System roles (OWNER, ADMIN, etc.) cannot be deleted
  color       String?  // Hex color for UI badges
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([isSystem])
}

enum UserRole {
  OWNER      // Full system access, can manage everything
  ADMIN      // Can manage most features, users, and settings
  MODERATOR  // Can manage events, applications, and players
  STAFF      // Can view and assist, limited editing
  USER       // Basic authenticated access
}

enum EventStatus {
  Draft
  Scheduled
  Published
  Archived
}

enum EventCategory {
  Fireworks
  SeasonalOverlay
  MeetAndGreet
  Parade
  Other
}

enum ApplicationRole {
  Developer
  GuestServices
  Imaginear
}

enum ApplicationStatus {
  New
  InReview
  Approved
  Rejected
}

// Enums

enum RecurrenceFreq {
  NONE
  DAILY
  WEEKLY
}

enum Weekday {
  SU
  MO
  TU
  WE
  TH
  FR
  SA
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Team {
  id             String       @id
  name           String       @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime
  updatedAt      DateTime?    @updatedAt
  teammembers    TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String    @id
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime?

  @@map("teamMember")
}

model Organization {
  id          String       @id
  name        String       @db.Text
  slug        String
  logo        String?      @db.Text
  createdAt   DateTime
  metadata    String?      @db.Text
  teams       Team[]
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String       @db.Text
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String       @db.Text
  role           String?      @db.Text
  teamId         String?      @db.Text
  status         String       @db.Text
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
